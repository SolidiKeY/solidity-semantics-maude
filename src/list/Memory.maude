load Field .

fmod MEMORY{Field :: FIELD} is
    *** pr LIST{FieldAsTriv}{Field} .
    pr FIELD-FM{Field} .

    sort Memory .
    subsort Memory < Value .

    op none : -> Memory [ctor] .
    op _·_ : Memory Memory -> Memory [ctor assoc id: none prec 27] .
    op [_=_] : Identity Value -> Memory [ctor prec 26] .
    op _|>_ : Memory Identity -> Value [prec 28] .
    op <_> : Field$PrimIdentity -> Memory .
    op default : Field$Field -> Value .

    var xs : Memory .
    vars id id2 : Identity .
    vars pId pId2 : Field$PrimIdentity .
    vars f f2 : Field$Field .
    var flds : List{FieldAsTriv}{Field} .
    var v : Value .

    eq xs · [ id : f = v ] |> id : f = v .
    eq xs · [ id = v ] |> id2 = xs |> id2 [owise] .

    eq xs · < pId > |> pId : flds f = default(f) .
    eq xs · < pId > |> id = xs |> id [owise] .
endfm

fmod Example is
    pr MEMORY{FieldExView} .

    ops mem memEx memEx2 : -> Memory .

    eq memEx = mem · < aId > · [ aId : $age = 20 ] .
endfm

red memEx |> aId : $age .
red memEx |> aId : $account .
red memEx |> bId : $account .
