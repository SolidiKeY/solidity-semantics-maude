load Fields .

fmod BANK{Field :: TRIV} is
    pr FIELDS{Field} .

    sort Memory .

    op mtMem : -> Memory .
    op new : Memory PrimIdentity -> Memory .
    op read : Memory Identity Field$Elt -> Value .
    op readR : Memory Identity NeList{Field} -> Value .
    op write : Memory Identity Field$Elt Value -> Memory .
    op delete : Memory Identity -> Memory .
    op idC : PrimIdentity List{Field} -> Identity .

    op erase : Memory -> Memory .
    op _:_ : Identity List{Field} -> Identity .

    op emptyMemory : -> Memory .

    vars i j size : Int .
    var memory : Memory .
    vars id idn : PrimIdentity .
    var idComplex id1 id2 : Identity .
    var val : Value .
    var sel sel1 sel2 : Field$Elt .
    var pSel : PrimField .
    var idS : IdField .
    var ls ls1 ls2 : List{Field} .
    var ls3 : NeList{Field} .

    eq idC(id, ls1) : ls2 = idC(id, ls1 ls2) .

    eq read(write(memory, id1, sel, val), id1, sel) = val .
    ceq read(write(memory, id1, sel1, val), id2, sel2) = read(memory, id2, sel2)
        if id1 =/= id2 or sel1 =/= sel2 .

    eq read(new(memory, id), idC(id, ls), pSel) = 0 .
    eq read(new(memory, id), idC(id, ls), idS) = idC(id, ls idS) .
    ceq read(new(memory, id), idC(idn, ls), sel) = read(memory, idC(idn, ls), sel)
        if id =/= idn .

    eq read(emptyMemory, id1, pSel) = 0 .
    eq read(emptyMemory, id1, idS) = id1 : idS .

    eq read(delete(memory, idC(id, ls)), idC(id, ls ls2), pSel) = 0 .
    eq read(delete(memory, idC(id, ls)), idC(id, ls ls2), idS) = idC(id, ls ls2 idS) .

    eq readR(memory, id1, ls3 sel) = read(memory, read(memory, id1, ls3), sel) .

endfm

fmod BANK-ERASE-LAZY{Field :: TRIV} is
    pr INT .
    pr LIST{Field} .
    pr BANK{Field} .

    vars i j size : Int .
    var memory : Memory .
    vars id : PrimIdentity .
    var idComplex id1 id2 : Identity .
    var val : Value .
    var sel sel1 sel2 : Field$Elt .
    var pSel : PrimField .
    var idS : IdField .
    var ls ls1 ls2 : List{Field} .

    eq read(erase(memory), idC(id, ls) , idS) = idC(id, idS ls) .
    eq read(erase(memory), idC(id, nil) , pSel) = read(memory, idC(id, nil) , pSel) .
    eq read(erase(memory), idC(id, ls sel), pSel) = read(memory, read(memory, idC(id, ls), sel), pSel) .
endfm

fmod TEST-BANK-FIELDS{Field :: TRIV} is
    pr BANK{Field} .

    ops abMemory memory wMemory cMemory : -> Memory .
    ops aliceC bobC bAccC : -> PrimIdentity .
    ops alice bob bAcc : -> Identity .
    op $balance : -> PrimField .
    op $account : -> IdField .

    eq alice = idC(aliceC, nil) .
    eq bob = idC(bobC, nil) .
    eq bAcc = idC(bAccC, nil) .

    eq wMemory = write(write(emptyMemory, bob , $account , bAcc), bAcc, $balance, 1) .
    eq cMemory = erase(wMemory) .

    eq abMemory = write(write(mtMem, alice : $account, $balance, 10),
          bob, $account, alice : $account) .
endfm

fmod TEST-BANK{Field :: TRIV} is
    pr BANK-ERASE-LAZY{Field} .
    pr TEST-BANK-FIELDS{Field} .
endfm

red read(emptyMemory, bAcc, $balance) .
red read(emptyMemory, bob, $account) .

red read(wMemory, bob, $account) .
red read(cMemory, bob, $account) .
red read(cMemory, bAcc, $balance) .

red read(cMemory, idC(bobC, $account), $balance) .

red read(emptyMemory, bob, $account)  .

red read(delete(memory, bob), bob : $account, $balance) .
red read(delete(memory, bob), bob : $account, $account) .

fmod BANK-ERASE{Field :: TRIV} is
    pr INT .
    pr LIST{Field} .
    pr BANK{Field} .

    vars i j size : Int .
    var memory : Memory .
    vars id : PrimIdentity .
    var idComplex id1 id2 id3 : Identity .
    var val : Value .
    var sel sel1 sel2 : Field$Elt .
    var pSel : PrimField .
    var idS : IdField .
    var ls ls1 ls2 ls3 : List{Field} .


    eq erase(mtMem) = mtMem .
    eq erase(new(memory, id)) = new(erase(memory), id) .
    eq erase(write(memory, id1, pSel, val)) = write(erase(memory), id1, pSel, val) .

    op copy : Memory Identity Identity -> Memory .

    eq erase(write(memory, id1, idS, id2)) = copy(erase(memory), id1 : idS, id2) .

    eq copy(mtMem, id1, id2) = mtMem .
    *** New does not change anything, it can just skip
    eq copy(new(memory, id), id1, id2) = memory .
    eq copy(write(memory, idC(id, ls1 ls2), sel, val), id3, idC(id, ls1)) =
        write(write(copy(memory, id3, idC(id, ls1)),
            idC(id, ls1 ls2), sel, val), id3 : ls2, sel, val) .
endfm


fmod TEST-BANK{Field :: TRIV} is
    pr BANK-ERASE{Field} .
    pr TEST-BANK-FIELDS{Field} .
endfm

red erase(abMemory) .
