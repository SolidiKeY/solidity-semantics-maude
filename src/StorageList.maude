fth FIELD is
    pr INT .
    
    sorts PrimIdentity Identity ValueConc Value .
    sorts PrimField IdField Field .
    subsort PrimField IdField < Field .
    subsort ValueConc < Value .
    subsort Int < Field .

    op length : -> PrimField .
endfth

view FieldAsTriv from TRIV to FIELD is
    sort Elt to Field .
endv
    
fmod STORAGE{Field :: FIELD} is
    pr LIST{FieldAsTriv}{Field} .
    sorts Struct .
    subsort Struct < Field$Value .

    vars st1 st2 : Struct .

    op none : -> Struct [ctor] .
    op _·_ : Struct Struct -> Struct [ctor assoc id: none prec 27] .
    op [_=_] : NeList{FieldAsTriv}{Field} Field$Value -> Struct [ctor prec 26] .
    op _|>_ : Struct List{FieldAsTriv}{Field} -> Field$Value [prec 28] .

    mb none : Struct .

    var xs : Struct .
    var flds : List{FieldAsTriv}{Field} .
    var fldsN fldsN2 : NeList{FieldAsTriv}{Field} .
    var idf : Field$IdField .
    var v : Field$Value .

    eq xs |> nil = xs .
    eq xs · [ fldsN = v ] |> fldsN = v .
    eq xs · [ fldsN = v ] |> fldsN fldsN2 = v |> fldsN2 .
    eq xs · [ fldsN fldsN2 = v ] |> fldsN = (xs |> fldsN) · [ fldsN2 = v ] .
    eq xs · [ fldsN = v ] |> fldsN2 = xs |> fldsN2 [owise] .

    mb xs |> flds idf : Struct .
endfm

red  [ fldsN = xs ] |> fldsN .

fmod FieldExample is
    pr INT .

    sorts PrimIdentity Identity ValueConc Value .
    sorts PrimField IdField Field .

    subsort PrimField IdField < Field .
    subsort Int < ValueConc < Value .
    subsort Int < Field .

    op length : -> PrimField .
    ops $alice $bob $carol $account : -> IdField .
    ops $balance : -> PrimField .
endfm

view FieldExView from FIELD to FieldExample is endv
    
fmod Example is
    pr STORAGE{FieldExView} .

    ops st stEx stEx2 : -> Struct .

    eq stEx = st · [ $alice $account length = 10 ] .
    eq stEx2 = st · [ $alice $account length = 10 ] · [ $alice $account 5 = 20 ] .
endfm

red stEx |> $alice $account length .
red stEx |> $alice $account .
red stEx2 |> $alice $account .
