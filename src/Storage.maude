load Fields .

fmod STORAGE{Field :: TRIV} is
    pr FIELDS{Field} .

    sort Struct .

    subsort Struct < Value .

    op mtSt : -> Struct .
    op store : Struct Field$Elt Value -> Struct .
    op select : Struct Field$Elt -> Value .
    op find : Struct List{Field} -> Value .

    var st : Struct .
    var fld : Field$Elt .
    var idF : IdField .
    var val : Value .
    var flds flds2 : List{Field} .
    var fldsN fldsN2 : NeList{Field} .

    mb find(st, idF) : Struct .

    eq find(store(st, fld, val), fld flds) = find(val, flds) .
    eq find(val, nil) = val .

    op v→st : Value -> Struct .
    eq v→st(st) = st .

    eq find(find(st, fldsN), fldsN2) =  find(st, fldsN fldsN2) .
endfm
