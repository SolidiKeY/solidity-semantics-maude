fmod ACC-FUNCTIONAL is
  pr STRING .
  pr INT .
  sort Account .
  op Account : Int Bool -> Account .


  sort AccountField .
  op $balance : -> AccountField .
  op $isOpen : -> AccountField .

  vars balance newBalance : Int .
  vars isOpen isOpenNew : Bool .
  vars acc newAcc : Account .

  sort Person .
  op Person : String Account -> Person .

  vars person : Person .
  vars name newName : String .

  sort PersonField .
  op $name : -> PersonField .
  op $account : -> PersonField .

  sort Field .
  subsort AccountField PersonField < Field .

  *** Writing

  op writeInt : Account AccountField Int -> Account .
  eq writeInt(Account(balance, isOpen),$balance, newBalance) = Account(newBalance, isOpen) .

  op writeBool : Account AccountField Bool -> Account .
  eq writeBool(Account(balance, isOpen),$isOpen, isOpenNew) = Account(balance, isOpenNew) .
endfm

view Field from TRIV to ACC-FUNCTIONAL is
  sort Elt to Field .
endv

fmod ACC-FUNCTIONAL-CONT is
  including ACC-FUNCTIONAL .
  pr LIST{Field} * (op __ to _::_) * (op nil to []) .

  vars balance newBalance : Int .
  vars isOpen isOpenNew : Bool .
  vars acc newAcc : Account .
  vars person : Person .
  vars name newName : String .

  **** Writing Lists

  op writeString : Person PersonField String -> Person .
  eq writeString(Person(name, acc), $name, newName) = Person(newName, acc) .

  op writeAccount : Person PersonField Account -> Person .
  eq writeAccount(Person(name, acc), $account, newAcc) = Person(name, newAcc) .

  vars listId : List{Field} .

  op writeInt : Person List{Field} Int -> Person .
  eq writeInt(Person(name, acc), $account :: listId, newBalance) = Person(name, writeInt(acc, listId, newBalance)) .

  op writeInt : Account List{Field} Int -> Account .
  eq writeInt(acc,$balance :: [], newBalance) = writeInt(acc, $balance, newBalance) .

  op writeBool : Person List{Field} Bool -> Person .
  eq writeBool(Person(name, acc), $account :: listId, isOpenNew) = Person(name, writeBool(acc, listId, isOpenNew)) .

  op writeBool : Account List{Field} Bool -> Account .
  eq writeBool(acc, $isOpen :: [], isOpenNew) = writeBool(acc, $isOpen, isOpenNew) .

  *** Reading

  op readString : Person PersonField -> String .
  eq readString(Person(name, acc), $name) = name .

  op readAccount : Person PersonField -> Account .
  eq readAccount(Person(name, acc), $account) = acc .

  op readInt : Account AccountField -> Int .
  eq readInt(Account(balance, isOpen), $balance) = balance .

  op readBool : Account AccountField -> Bool .
  eq readBool(Account(balance, isOpen), $isOpen) = isOpen .

  **** Reading Lists

  op readString : Person NeList{Field} -> String .
  eq readString(person, $name :: []) = readString(person, $name) .

  op readInt : Account NeList{Field} -> Int .
  eq readInt(acc, $balance :: []) = readInt(acc, $balance) .

  op readBool : Account NeList{Field} -> Bool .
  eq readBool(acc, $isOpen :: []) = readBool(acc, $isOpen) .

  op readInt : Person NeList{Field} -> Int .
  eq readInt(Person(name, acc), $account :: listId) = readInt(acc, listId) .

  op readBool : Person NeList{Field} -> Bool .
  eq readBool(Person(name, acc), $account :: listId) = readBool(acc, listId) .


  op readAccount : Account List{Field} -> Account .
  eq readAccount(acc, []) = acc .

  op readPerson : Person List{Field} -> Person .
  eq readPerson(person, []) = person .
endfm

fmod ACC-TESTE is
  pr ACC-FUNCTIONAL-CONT .
  op aliceAcc : -> Account .
  eq aliceAcc = Account(10, true) .

  op alice : -> Person .
  eq alice = Person("Alice", aliceAcc) .

  op bob : -> Person .
  eq bob = Person("Bob", bobAcc) .

  op bobAcc : -> Account .
  eq bobAcc = Account(20, false) .

endfm


red writeInt(aliceAcc, $balance, 100) .
red writeBool(aliceAcc, $isOpen, false) .

red writeString(alice, $name, "Ana") .
red writeAccount(alice, $account, bobAcc) .

red writeInt(alice, $account :: $balance :: [], 100) .
red writeBool(alice, $account :: $isOpen :: [], false) .


red readInt(aliceAcc, $balance) .
red readBool(aliceAcc, $isOpen) .
red readString(alice, $name) .
red readAccount(alice, $account) .

red readInt(readAccount(alice, $account), $balance) .

red readInt(alice, $account :: $balance :: []) .
red readBool(alice, $account :: $isOpen :: []) .

red readPerson(alice, []) .
red readAccount(bobAcc, []) .
