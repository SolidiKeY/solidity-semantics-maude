fmod STACK is
    pr INT .

    sorts Value Stack Map .

    op Stack : Map Int -> Stack .
    op getMap : Stack -> Map .
    op length : Stack -> Int .


    op emptyMap : -> Map .
    op write : Map Int Value -> Map .
    op read : Map Int -> Value .

    op emptyStack : -> Stack .
    op push : Stack Value -> Stack .
    op pop : Stack -> Stack .
    op top : Stack -> Value .
    op defaultValue : -> Value .

    var map : Map .
    var stack : Stack .
    vars i j size : Int .
    var val : Value .

    op norm : Int -> Int .
    op findOne : Int -> Bool .
    op removeOne : Int -> Int .

    eq findOne(i + 1) = true .
    eq findOne(i - 1) = findOne(i) .
    eq findOne(i) = false .

    eq removeOne(i + 1) = i .
    eq removeOne(i - 1) = removeOne(i) .

    ceq norm(i - 1) = norm(removeOne(i))
        if findOne(i) .

    eq getMap(Stack(map, size)) = map .
    eq length(Stack(map, size)) = size .

    ceq read(write(map, i, val), j) = val
        if norm(i) == norm(j) .
    ceq read(write(map, i, val), j) = read(map, j)
        if norm(i) =/= norm(j) .

    eq emptyStack = Stack(emptyMap, 0) .
    eq push(stack, val) = Stack(write(getMap(stack), length(stack), val), length(stack) + 1) .
    eq pop(stack) = Stack(write(getMap(stack), length(stack) - 1, defaultValue), length(stack) - 1) .
    eq top(stack) = read(getMap(stack), length(stack) - 1) .
endfm

fmod TEST-STACK is
    pr STACK .

    ops v1 v2 : -> Value .
    ops unknownStack exUnknown exUnknown2 exStack : -> Stack .

    eq exUnknown = push(unknownStack, v1) .
    eq exUnknown2 = push(push(unknownStack, v1), v2) .

    eq exStack = push(push(emptyStack, v1), v2) .
endfm

red exStack .

red pop(exStack) .

red top(exStack) .

red top(pop(exStack)) .

red top(pop(pop(exStack))) .

red exUnknown .

red top(exUnknown) .

red pop(exUnknown) .

red top(pop(exUnknown)) .

red exUnknown2 .

red top(exUnknown2) .

red pop(exUnknown2) .

red top(pop(exUnknown2)) .
