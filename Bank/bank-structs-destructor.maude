fmod BANK-SORT is
    pr INT .

    sort Account Map Person Struct Bank BankPersonSelector BankSelector PersonSelector Selector Name Status Value .
    subsort Account Map Person Bank Name Int Status < Value .
    subsort PersonSelector BankPersonSelector BankSelector Int < Selector .

    ops Bank : Map -> Bank .
    ops This : Person Person Bank -> Value .

    ops Alice Bob : -> Name .
    ops open closed : -> Status .

    ops $alice $bob : -> PersonSelector [ctor] .
    ops $bank : -> BankPersonSelector [ctor] .
    ops $name $accountNr : -> PersonSelector [ctor] .
    ops $accounts : -> BankSelector [ctor] .

    ops Person : Name Int -> Person .
endfm

view Selector from TRIV to BANK-SORT is
    sort Elt to Selector .
endv

fmod BANK is
    pr BANK-SORT .
    pr LIST{Selector} .

    sort Tuple .

    op write : Value List{Selector} Value -> Value .
    op write : Map List{Selector} Int -> Map .
    op read : Value List{Selector} -> Value .

    vars struct value : Value .
    var map : Map .
    var bank : Bank .
    var name : Name .
    var $sel $selWrite $selRead : Selector .
    var list listWrite listRead : List{Selector} .
    var i j : Int .
    var $person : PersonSelector .
    vars alice bob person : Person .

    ops getAlice getBob : Value -> Person .
    op getBank : Value -> Bank .
    op getName : Person -> Name .
    op getAccountNr : Person -> Int .
    op getMap : Bank -> Map .

    eq getAlice(This(alice, bob, bank)) = alice .
    eq getBob(This(alice, bob, bank)) = bob .
    eq getBank(This(alice, bob, bank)) = bank .
    eq getName(Person(name, i)) = name .
    eq getAccountNr(Person(name, i)) = i .
    eq getMap(Bank(map)) = map .

    eq read(value, nil) = value .

    eq read(struct, $alice list) = read(getAlice(struct), list) .
    eq read(struct, $bob list) = read(getBob(struct), list) .
    eq read(struct, $bank list) = read(getBank(struct), list) .

    eq read(person, $name) = getName(person) .
    eq read(person, $accountNr) = getAccountNr(person) .

    eq read(bank, $accounts list) = read(getMap(bank), list) .
    eq read(write(map, i, value), i) = value .
    ceq read(write(map, i, value), j) = read(map, j)
        if i =/= j .


    eq write(struct, nil, value) = value .
    eq write(struct, $alice list, value) = This(write(getAlice(struct), list, value), getBob(struct), getBank(struct)) .
    eq write(struct, $bob list, value) = This(getAlice(struct), write(getBob(struct), list, value), getBank(struct)) .
    eq write(struct, $bank list, value) = This(getAlice(struct), getBob(struct), write(getBank(struct), list, value)) .
    eq write(person, $name, name) = Person(name, getAccountNr(person)) .
    eq write(person, $accountNr, i) = Person(getName(person), i) .
    eq write(bank, $accounts list, value) = Bank(write(getMap(bank), list, value)) .


    op defaultMap : -> Map .
    op defaultBank : -> Bank .
    op defaultPerson : -> Person .
    op defaultName : -> Name .
    op defaultStruct : -> Value .

    eq read(defaultMap, i) = 0 .
    eq defaultBank = Bank(defaultMap) .
    eq defaultPerson = Person(defaultName, 0) .
    eq defaultStruct = This(defaultPerson, defaultPerson, defaultBank) .

    op _<-_ : List{Selector} Value -> Tuple [prec 30] .
    op _;_ : Value Tuple -> Value .

    eq struct ; list <- value = write(struct, list, value) .
endfm

fmod TEST-BANK is
    pr BANK .

    op balances : -> Map .
    op exStruct : -> Value .
    ops aliceAccountNr bobAccountNr : -> Int .

    eq balances = write(write(defaultMap, 10, 100), 11, 200) .
    eq exStruct = This(Person(Alice, 10), Person(Bob, 11), Bank(balances)) .

    eq aliceAccountNr = read(exStruct, $alice $accountNr) .
    eq bobAccountNr = read(exStruct, $bob $accountNr) .

    ops unknown aliceWithBank : -> Value .

    eq aliceWithBank  = unknown ; $alice $accountNr <- 10 ; $bank $accounts 10 <- 100 .
    eq aliceAccountNr = read(exStruct, $alice $accountNr) .
endfm

red read(exStruct, $alice $name) .

red read(exStruct, $alice $accountNr) .

red read(exStruct, $bank $accounts aliceAccountNr) .

red read(exStruct, $bank $accounts bobAccountNr) .

red read(exStruct, $bank $accounts 20) .

red write(unknown, $alice $name, Alice) .

red read(write(unknown, $alice $name, Alice), $alice $name) .

red write(unknown, $bank $accounts 10, 100) .

red aliceWithBank .

red read(aliceWithBank, $bank $accounts aliceAccountNr) .

red read(defaultStruct, $bank $accounts 0) .

red read(defaultStruct, $alice $name) .

red read(defaultStruct, $alice $accountNr) .

red unknown ; $alice $accountNr <- 10 ; $bank $accounts 10 <- 100 .

red write(exStruct, $bank $accounts read(exStruct, $alice $accountNr), 500) .

red read(write(exStruct, $bank $accounts read(exStruct, $alice $accountNr), 500),
    $bank $accounts read(
    write(exStruct, $bank $accounts read(exStruct, $alice $accountNr), 500)
    , $alice $accountNr)) .
