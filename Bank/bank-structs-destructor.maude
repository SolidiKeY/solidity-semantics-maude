fmod BANK-SORT is
    pr INT .

    sort Account Map Person Struct Bank BankPersonSelector BankSelector PersonSelector Selector Name Status Value .
    subsort Account Map Person Bank Name Int Status < Value .
    subsort PersonSelector BankPersonSelector BankSelector Int < Selector .

    ops Bank : Map -> Bank .
    ops This : Person Person Bank -> Value .

    ops Alice Bob : -> Name .
    ops open closed : -> Status .

    ops $alice $bob : -> PersonSelector [ctor] .
    ops $bank : -> BankPersonSelector [ctor] .
    ops $name $accountNr : -> PersonSelector [ctor] .
    ops $accounts : -> BankSelector [ctor] .

    ops Person : Name Int -> Person .
    ops Account : Int Status -> Account .
endfm

view Selector from TRIV to BANK-SORT is
    sort Elt to Selector .
endv

fmod BANK is
    pr BANK-SORT .
    pr LIST{Selector} .

    sort Tuple .

    ops write : Value List{Selector} Value -> Value .
    ops read : Value List{Selector} -> Value .

    vars struct value : Value .
    var map : Map .
    var bank : Bank .
    var name : Name .
    var $sel $selWrite $selRead : Selector .
    var list listWrite listRead : List{Selector} .
    var i j : Int .
    var $person : PersonSelector .
    vars alice bob  : Person .

    eq read(value, nil) = value .

    eq read(This(alice, bob, bank), $bank list) = read(bank, list) .
    eq read(This(alice, bob, bank), $alice list) = read(alice, list) .
    eq read(This(alice, bob, bank), $bob list) = read(bob, list) .
    eq read(Person(name, i), $name) = name .
    eq read(Person(name, i), $accountNr) = i .
    eq read(bank, nil) = bank .
    eq read(Bank(map), $accounts list) = read(map, list) .

    eq read(write(map, i, value), i) = value .
    ceq read(write(map, i, value), j) = read(map, j)
        if i =/= j .

    *** ceq read(write(struct, $selWrite listWrite, value), $selRead listRead) = read(struct, $selRead listRead)
    ***     if $selWrite =/= $selRead .
    *** eq read(write(struct, $sel, value), $sel) = value .

    *** eq read(write(struct, $sel listWrite, value), $sel listRead) = read(write(read(struct, $sel), listWrite, value), listRead) .

    op defaultMap : -> Map .
    op defaultBank : -> Struct .
    op defaultAccount : -> Account .
    ops defaultPerson defaultName : -> Person .
    op defaultStruct : -> Value .

    eq read(defaultMap, i) = 0 .
    *** eq read(defaultPerson, nil) = defaultPerson .
    *** eq read(Person(), $name) = defaultName .
    *** eq read(defaultPerson, $accountNr) = 0 .
    *** eq read(defaultStruct, nil) = defaultStruct .
    *** eq read(defaultStruct, $person list) = read(defaultPerson, list) .
    *** eq read(defaultStruct, $bank list) = read(defaultMap, list) .
    *** eq read(defaultBank, nil) = defaultBank .
    *** eq read(defaultBank, $accounts list) = defaultBank .

    op _<-_ : List{Selector} Value -> Tuple [prec 30] .
    op _;_ : Value Tuple -> Value .

    eq struct ; list <- value = write(struct, list, value) .
endfm

fmod TEST-BANK is
    pr BANK .

    op exStruct : -> Value .
    op aliceAccountNr : -> Int .

    eq exStruct = This(Person(Alice, 0), Person(Bob, 1), Bank(defaultMap)) .

    eq aliceAccountNr = read(exStruct, $alice $accountNr) .

    *** ops unknown aliceWithBank : -> Value .
    *** ops aliceAccountNr : -> Int .

    *** eq aliceWithBank  = unknown ; $alice $accountNr <- 10 ; $bank 10 <- 100 .
    *** eq aliceAccountNr = read(aliceWithBank, $alice $accountNr) .
endfm


red read(exStruct, $alice $name) .

red read(exStruct, $alice $accountNr) .

red read(exStruct, $bank $accounts aliceAccountNr) .

*** red unknown ; $alice $accountNr <- 10 ; $bank 10 <- 100 .

*** red write(unknown, $alice $name, Alice) .

*** red read(write(unknown, $alice $name, Alice), $alice $name) .

*** red write(unknown, $bank 10, 100) .

*** red aliceWithBank .

*** red read(aliceWithBank, $bank aliceAccountNr) .

*** red read(defaultStruct, $bank 0) .

*** red read(defaultStruct, $alice $name) .

*** red read(defaultStruct, $alice $accountNr) .
