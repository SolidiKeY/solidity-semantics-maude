load Memory .
load Storage .

fmod StorageToMemory{Field :: TRIV} is
    pr BANK-ERASE{Field} .
    pr STORAGE{Field} .

    var st : Value .
    var pF : PrimField .
    var fld : Field$Elt .
    var idF : IdField .
    var vSt : Struct .
    var vInt : Int .
    var id id2 : PrimIdentity .
    var mem : Memory .
    var fxs : List{Field} .

    op copySt : Memory PrimIdentity Value -> Memory .

    ceq read(copySt(mem, id, st), idC(id2, fxs), fld) =
        read(mem, idC(id2, fxs), fld)
        if id =/= id2 .

    eq read(copySt(mem, id, st), idC(id, fxs), idF) =
        idC(id, fxs idF) .

    eq read(copySt(mem, id, st), idC(id, fxs), pF) =
        find(st, fxs pF) .
endfm

fmod Examples{Field :: TRIV} is
    pr StorageToMemory{Field} .

    ops $alice $bob $account $balance : -> PrimField .
    ops st1 stAlice stBal : -> Struct .
    ops idA idF : -> PrimIdentity .
    ops mem nMem memAlice : -> Memory .

    eq stBal = store(mtSt, $balance, 10) .
    eq stAlice = store(mtSt, $account, stBal) .

    eq nMem = copySt(mem, idA, stBal) .
    eq memAlice = copySt(mem, idA, stAlice) .
endfm

red read(nMem, idC(idA, nil), $balance) .
red read(memAlice, idC(idA, $account), $balance) .

fmod ShallowExample{Field :: TRIV} is
    pr StorageToMemory{Field} .

    op add1 : Value -> Value .
    op toId : Value -> Identity .
    ops $pn $balance : -> PrimField .
    ops $alice $bob $carol $account : -> IdField .
    ops st stC : -> Struct .
    ops mem memAlice memBob alice++ shallow shallowMod : -> Memory .
    ops idB idA : -> PrimIdentity .
    ops idAA idBB : -> Identity .
    ops vA vB vA2 vB2 : -> Int .

    eq stC = find(st, $carol) .

    eq memAlice = copySt(mem, idA, stC) .
    eq memBob   = copySt(memAlice, idB, stC) .

    eq idAA = read(memBob, idC(idA, nil), $account) .
    eq idBB = read(memBob, idC(idB, nil), $account) .

    eq alice++ = write(memBob, idAA, $balance, add1(read(memBob, idAA, $balance))) .

    eq vA = read(alice++, idAA, $balance) .
    eq vB = read(alice++, idBB, $balance) .

    eq shallow = write(alice++, idBB, $account, read(alice++, idAA, $account)) .

    eq shallowMod = write(shallow, toId(read(shallow, idBB, $account)), $balance, 10) .
    eq vA2 = read(shallowMod, toId(read(shallowMod, idAA, $account)), $balance) .
    eq vB2 = read(shallowMod, toId(read(shallowMod, idBB, $account)), $balance) .

endfm

red idAA .
red idBB .

red memAlice .
red memBob .

red read(memBob, idAA, $balance) .
red read(memBob, idBB , $balance) .

red alice++ .

red vA == add1(vB) .
red vA =/= vB .

red shallow .
red shallowMod .

red read(shallowMod, idAA, $account) .

red vA2 .
red vB2 .
red vA2 == vB2 .
