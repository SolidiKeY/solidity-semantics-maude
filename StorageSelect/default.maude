fmod FUNCS{X :: TRIV} is
    pr NAT .
    pr LIST{X} * (sort List{X} to Path) .
    sorts Storage Value Field ConcreteField IdField .
    subsort Nat < Value .
    subsort ConcreteField IdField < Field < X$Elt .

    op _|_:=_ : Value Path Value -> Value [gather (E e e)] .
    op _|>_ : Value Path -> Value .

    vars path path1 path2 : Path .

    op _isPrefixOf_ : Path Path -> Bool .
    eq path1 isPrefixOf path1 path2 = true .
    eq path1 isPrefixOf path2 = false [owise] .

    op _-_ : Path Path -> Path .
    eq path1 path2 - path2 = path1 .

    var st stV : Value .
    var v : Value .

    eq st | path  := v   |> path = v .
    eq st | path1 := stV |> path1 path2 = stV |> path2 .
    eq st | path1 path2 := v |> path1 = st |> path1 | path2 := v .
endfm

fmod TEST{X :: TRIV} is
    pr FUNCS{X} .

    op $account : -> IdField .
    op $balance : -> ConcreteField .

    op st : -> Value .
endfm


red $account isPrefixOf $account $balance .
red $balance isPrefixOf $account $balance .

red $account $balance - $balance .

red st | $account $balance := 20 |> $account |> $balance .
