fmod FUNCS{X :: TRIV} is
    pr NAT .
    pr LIST{X} * (sort List{X} to Path, sort NeList{X} to NPath) .
    sorts Storage Value Field ConcreteField IdField .
    subsort Nat < Value .
    subsort ConcreteField IdField < Field < X$Elt .
    subsort Nat < ConcreteField .

    op _|_:=_ : Value Path Value -> Value [gather (E e e)] .
    op _|>_ : Value Path -> Value .

    ops default mtst : -> Value .
endfm

fmod EXAMPLES{X :: TRIV} is
    pr FUNCS{X} .

    ops a b : -> IdField .
    op $account : -> IdField .
    op $balance : -> ConcreteField .

    op st : -> Value .

    ops stC st2 st3 : -> Value .
    eq stC = st | b := (st |> a) .

    eq st2 = st | a 5 := 7 | b 10 := 2 | a 9 := 11 .
    eq st3 = st2 | b := (st2 |> a) .
endfm

fmod StEq {X :: TRIV} is
    pr FUNCS{X} .

    vars path path1 path2 : Path .
    vars pathN1 pathN2 : NPath .

    var st stV : Value .
    var v : Value .

    eq st | path  := v   |> path = v .
    eq st | path1 := stV |> path1 path2 = stV |> path2 .
    eq st | path1 path2 := v |> path1 = st |> path1 | path2 := v .
    eq st | path1 := v |> path2 = st |> path2 [owise] .

    eq st |> pathN1 pathN2 = st |> pathN1 |> pathN2 .
endfm


fmod StEtTEST{X :: TRIV} is
    pr StEq{X} .
    pr EXAMPLES{X} .
endfm

red st | $account $balance := 20 |> $account |> $balance .

red stC |> a 20 .
red stC |> b 20 .

red stC |> a 20 == stC |> b 20 .

red st3 |> b 5 .
red st3 |> a 20 == st3 |> a 20 .

fmod StSave {X :: TRIV} is
    pr FUNCS{X} .

    var k k' : Field .
    vars path path1 path2 : Path .
    vars pathN1 pathN2 : NPath .

    var st stV : Value .
    var v v' : Value .

    op _|>f_ : Value Path -> Value .
    op _<|_:=_ : Value Path Value -> Value [gather (E e e)] .

    eq mtst |> path = default .
    eq st | path := v |> path = v .
    eq st | path := v |> path2 = st |> path2 [owise] .

    eq st |>f nil = st .
    eq st |>f k path = st |> k |>f path .

    eq st | k := v <| k path := v' = st | k := v <| path := v' .
    ceq st | k := v <| k' path := v' = (st <| k' path := v') | k := v
        if k =/= k' .
    eq mtst <| k path := v = mtst | k := (mtst <| path := v) .
    eq st <| nil := v = v .

    eq st <| k := v |> k = v .
    ceq st <| k := v |> k' = st |> k'
        if k =/= k' .
endfm


fmod StSaveSTEST{X :: TRIV} is
    pr StSave{X} .

    ops a b : -> IdField .
    op $account : -> IdField .
    op $balance : -> ConcreteField .

    op st : -> Value .

    ops stC st2 st3 : -> Value .
    eq stC = st <| b := (st |> a) .

    eq st2 = st <| a 5 := 7 <| b 10 := 2 <| a 9 := 11 .
    eq st3 = st2 <| b := (st2 |> a) .
endfm

red st <| $balance := 20 |> $balance .
