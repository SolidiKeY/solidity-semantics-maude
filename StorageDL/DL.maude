fmod DYNAMIC is
    sorts Type KeySimple KeyComplex Key Value KeyValue KeyValuePair Updates Assign Program NeProgram Left Right .

    subsort KeyValuePair < Updates .
    *** subsort Assign < Program .
    subsort KeySimple KeyComplex < Key .
    subsort Key Value < KeyValue .
    subsort KeyValue < Left Right .
    subsort Assign < NeProgram < Program .

    op {_}_ : Updates Updates -> Updates .
    op _||_ : Updates Updates -> Updates [prec 33 assoc] .
    op _:=_ : Key KeyValue -> KeyValuePair [prec 31] .
    op _,_ : Key Key -> KeyComplex [prec 30 assoc] .
    op <_> : Program -> Updates .
    ops <> nil : -> Program .
    op nil : -> Updates .
    op _;_ : Program Program -> Program [ctor assoc id: nil prec 37] .
    op _;_ : NeProgram Program -> NeProgram [ctor ditto] .
    op _;_ : Program NeProgram -> NeProgram [ctor ditto] .
    op _<-_ : Left Right -> Assign [prec 35] .
    ops Person Account Int : -> Type .
    op _storage_ : Type Key -> Left [prec 31] .

    op Storage : -> KeySimple .
    op store : KeySimple Key KeyValue -> KeyValue .
    op read : KeySimple Key -> KeyValue .
    op fieldApp : KeySimple KeySimple -> KeySimple .
    op freshVar : -> KeySimple .

    vars sL sRR a : KeySimple .
    var cR : KeyComplex .
    var sR : KeyValue .
    var prog : Program .
    var updated : Updates .

    eq < sL,a <- sR ; prog > = { Storage := store(Storage, fieldApp(sL, a), sR) }< prog > .
    eq < sL <- cR,a ; prog > = < Account storage freshVar <- cR ; sL <- freshVar,a ; prog > .
    eq < Account storage sL <- sRR,a ; prog > = { sL := fieldApp(sRR, a) }< prog > .
    eq < sL <- sRR,a ; prog > = { sL := read(Storage, fieldApp(sRR, a)) }< prog > .
endfm

fmod DYNAMIC-TEST is
    pr DYNAMIC .
    ops accS account balance v carol : -> KeySimple .
    op x0 : -> Value .
endfm

red < accS,balance <- x0 ; carol,account <- accS ; v <- carol,account,balance > .
