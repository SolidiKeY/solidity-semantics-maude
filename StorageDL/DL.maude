fmod DYNAMIC is
    pr NAT .
    sorts Type KeySimple KeyComplex Key FieldStorage FieldConcrete Field Value
        KeyStorage KeyConcrete KeyValue KeyValuePair Updates Assign Program NeProgram Left Right
        KeyStorageComplex KeyConcreteComplex KeySimpleStorage KeySimpleConcrete .

    subsort KeyValuePair < Updates .
    subsort FieldStorage FieldConcrete < Field .
    subsort KeySimpleStorage KeySimpleConcrete < KeySimple .
    subsort KeyStorageComplex KeyConcreteComplex < KeyComplex .
    subsort KeySimple KeyComplex < Key .
    subsort KeySimpleConcrete < Value .
    subsort Key Value < KeyValue .
    subsort KeyValue < Left Right .
    subsort Assign < NeProgram < Program .

    op {_}_ : Updates Updates -> Updates .
    op _||_ : Updates Updates -> Updates [prec 33 assoc] .
    op _:=_ : Key KeyValue -> KeyValuePair [prec 31] .
    op _,_ : Key FieldStorage -> KeyStorageComplex [prec 30] .
    op _,_ : Key FieldConcrete -> KeyConcreteComplex [prec 30] .
    op <_> : Program -> Updates .
    ops <> nil : -> Program .
    op nil : -> Updates .
    op _;_ : Program Program -> Program [ctor assoc id: nil prec 37] .
    op _;_ : NeProgram Program -> NeProgram [ctor ditto] .
    op _;_ : Program NeProgram -> NeProgram [ctor ditto] .
    op _<-_ : Left Right -> Assign [prec 35] .
    ops Person Account Int : -> Type .
    op _storage_ : Type Key -> Left [prec 31] .

    op Storage : -> KeySimple .
    op store : KeySimple Key KeyValue -> KeyValue .
    op read : KeySimple Key -> KeyValue .
    op fieldApp : KeySimple Field -> KeySimple .
    op Cp : Program -> KeySimple .
    op C  : Nat -> KeySimple .
    op K : -> KeySimpleConcrete .
    op Ks : -> KeySimpleStorage .

    vars sL sRR : KeySimple .
    var a : Field .
    var aC : FieldConcrete .
    var cL cR : KeyComplex .
    var kvL kvR : KeyValue .
    var sLs sR : Key .
    var prog : Program .
    var updated : Updates .
    var val : Value .
    var kval : KeyValue .
    var type : Type .
    var assign : Assign .
    var n : Nat .
    var stC : KeyStorageComplex .
    var ksStorL ksStorR : KeySimpleStorage .
    var kcC : KeyConcreteComplex .

    *** Right Part in Storage
    eq < sLs <- stC ; prog > = < Account storage Ks <- stC ; sLs <- Ks ; prog > .
    eq < type storage sL <- sRR,a ; prog > = { sL := fieldApp(sRR, a) }< prog > .
    eq < ksStorL <- ksStorR ; prog > = { K := read(Storage, ksStorR) } { Storage := store(Storage, ksStorL, K) } < prog > .

    *** Right Part Concrete in Storage
    eq < sLs <- stC,aC ; prog > = < Account storage Ks <- stC ; sLs <- Ks,aC ; prog > .
    eq < cL <- kcC ; prog > = < K <- kcC ; cL <- K ; prog > .
    eq < sL <- ksStorR,aC ; prog > = { sL := read(Storage, fieldApp(ksStorR, aC)) } < prog > .


    *** Left Part Complex in Storage
    eq < stC <- ksStorR ; prog > = < Account storage Ks <- stC ; Ks <- ksStorR ; prog > .
    eq < stC,aC <- kval ; prog > = < Account storage Ks <- stC ; Ks,aC <- kval ; prog > .

    *** Left Part Simple in Storage
    eq < sL,aC <- val ; prog > = { Storage := store(Storage, fieldApp(sL, aC), val) }< prog > .
    eq < type storage sL <- cR,a ; prog > = < type storage Ks <- cR ;
        type storage sL <- Ks,a ; prog > .
endfm

fmod DYNAMIC-TEST is
    pr DYNAMIC .
    ops subAccount account : -> FieldStorage .
    ops balance : -> FieldConcrete .
    ops accS alice carol : -> KeySimpleStorage .
    ops v : -> KeySimpleConcrete .
    op x0 : -> Value .
endfm

red < accS,balance <- x0 ; carol,account <- accS ; v <- carol,account,balance > .
red < carol,account,balance <- x0 ; alice,account <- carol,account ; v <- alice,account,balance > .
red < alice,account,subAccount <- carol,account,subAccount > .
red < alice,account,subAccount <- carol,account > .

red < accS <- carol,account > .
red < carol,account <- accS > .
red < carol,account,balance <- x0 > .
red < accS,balance <- x0 > .
red < alice,account,balance <- accS,balance > .
