fmod STATIC-ARRAY is
    pr INT .

    sorts Memory PrimIdentity Identity Value .
    sorts PrimSelector IdSelector Selector .
    subsort PrimSelector IdSelector < Selector .
    subsort Int Identity < Value .
    subsort PrimIdentity < Identity .

    op new : Memory Identity -> Memory .
    op read : Memory Identity Selector -> Value .
    op write : Memory Identity Selector Value -> Memory .
    op _:_ : Identity Selector -> Identity .

    op first : Identity -> PrimIdentity .
    op clear : Memory -> Memory .

    op emptyMemory : -> Memory .

    vars i j size : Int .
    var memory : Memory .
    vars id : PrimIdentity .
    var idComplex id1 id2 : Identity .
    var val : Value .
    var sel sel1 sel2 : Selector .
    var pSel : PrimSelector .
    var idS : IdSelector .

    eq read(write(memory, id1, sel, val), id1, sel) = val .
    ceq read(write(memory, id1, sel1, val), id2, sel2) = read(memory, id2, sel2)
        if id1 =/= id2 or sel1 =/= sel2 .

    eq first(id) = id .
    eq first(idComplex : sel) = first(idComplex) .

    ceq read(new(memory, id), idComplex, pSel) = 0
        if id == first(idComplex) .

    eq read(clear(memory), id1, idS) = id1 : idS .

    eq read(clear(memory), id1, pSel) = read(memory, id1, pSel) .
endfm

fmod TEST-STATIC-ARRAY is
    pr STATIC-ARRAY .

    ops memory wMemory cMemory : -> Memory .
    ops idU id1 id2 idV1 idV2 : -> Identity .
    op pS : -> PrimSelector .
    op idS : -> IdSelector .
    ops iS1 is2 : -> IdSelector .

    eq wMemory = write(write(memory, id2 , idS , id1), id1, pS, 1) .
    eq cMemory = clear(wMemory) .
endfm

red read(wMemory, id2, idS) .
red read(cMemory, id2, idS) .
red read(cMemory, id1, pS) .
