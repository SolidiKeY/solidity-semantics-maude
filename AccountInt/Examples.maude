fmod ACC-TESTE is
  pr ACC-FUNCTIONAL-EXAMPLE .
  op aliceAcc : -> Account .
  eq aliceAcc = Account(10, 20) .

  op alice : -> Person .
  eq alice = Person(25, aliceAcc) .

  op bobAcc : -> Account .
  eq bobAcc = Account(100, 20) .

  op bob : -> Person .
  eq bob = Person(30, bobAcc) .

  op accountSymb : -> Account .

  op bob : -> Person .
  eq bob = Person(25, accountSymb) .

  op $acc$bal : -> ListId .
  eq $acc$bal = $account :: $balance :: [] .

  op personSymbol : -> Person .
endfm

red write(aliceAcc, $balance, 100) .
red write(aliceAcc, $debt, 200) .

red write(alice, $age, 40) .
red writeAccount(alice, $account, bobAcc) .

red write(alice, $account :: $balance :: [], 100) .
red write(alice, $account :: $debt :: [], 30) .

red read(aliceAcc, $balance) .
red read(aliceAcc, $debt) .
red read(alice, $age) .
red readAccount(alice, $account) .

red read(readAccount(alice, $account), $balance) .

red read(alice, $acc$bal ) .
red read(alice, $account :: $debt :: []) .

red readPerson(alice, []) .
red readAccount(bobAcc, []) .

red read(write(bob, $acc$bal, 10), $acc$bal) .

red read(write(Person(25, accountSymb), $account :: $balance :: [] , 10), $account :: $balance :: []) .

red read(write(personSymbol, $account :: $balance :: [] , 10), $account :: $balance :: []) .
