fmod ACC-FUNCTIONAL is
  pr INT .
  sort Account .
  op Account : Int Int -> Account [ctor] .

  sort AccountField .
  op $balance : -> AccountField [ctor] .
  op $debt : -> AccountField [ctor] .

  vars balance debt age i : Int .
  vars acc newAcc : Account .

  sort Person .
  op Person : Int Account -> Person [ctor] .

  vars person : Person .

  sort PersonField .
  op $age : -> PersonField [ctor] .
  op $account : -> PersonField [ctor] .

  sort Field .
  subsort AccountField PersonField < Field .

  var field fieldWrite fieldRead : Field .

  *** Writing

  op write : Account AccountField Int -> Account .
  eq write(Account(balance, debt), $balance, i) = Account(i, debt) .
  eq write(Account(balance, debt), $debt, i) = Account(balance, i) .

  op write : Person PersonField Int -> Person .
  eq write(Person(age, acc), $age, i) = Person(i, acc) .

  op writeAccount : Person PersonField Account -> Person .
  eq writeAccount(Person(age, acc), $account, newAcc) = Person(age, newAcc).

  **** Writing Lists

  sort ListId .
  op [] : -> ListId [ctor] .
  op _::_ : Field ListId -> ListId [ctor] .

  vars listId listIdWrite listIdRead : ListId .

  op write : Account ListId Int -> Account .
  eq write(acc, field :: [], i) = write(acc, field, i) .

  op write : Person ListId Int -> Person .
  eq write(person, field :: [], i) = write(person, field, i) .

  op write : Person ListId Int -> Person .
  eq write(Person(age, acc), $account :: listId, i) = Person(age, write(acc, listId, i)) .

  *** Reading

  op read : Account AccountField -> Int .
  eq read(Account(balance, debt), $balance) = balance .

  op read : Account AccountField -> Int .
  eq read(Account(balance, debt), $debt) = debt .

  op read : Person PersonField -> Int .
  eq read(Person(age, acc), $age) = age .

  op readAccount : Person PersonField -> Account .
  eq readAccount(Person(age, acc), $account) = acc .

  **** Reading Lists

  op read : Account ListId -> Int .
  eq read(acc, field :: []) = read(acc, field) .

  op read : Person ListId -> Int .
  eq read(person, $age :: []) = read(person, $age) .
  eq read(Person(age, acc), $account :: listId) = read(acc, listId) .

  op readAccount : Account ListId -> Account .
  eq readAccount(acc, []) = acc .

  op readPerson : Person ListId -> Person .
  eq readPerson(person, []) = person .


  *** Read after writing

  eq read(write(person, field, i), field) = i .
  eq read(write(acc, field, i), field) = i .

  eq read(write(person, $account :: listIdWrite, i), $account :: listIdRead) =
        read(write(readAccount(person, $account), listIdWrite, i), listIdRead) .

  ceq read(write(person, fieldWrite :: listIdWrite, i), fieldRead :: listIdRead) = read(person, fieldRead :: listIdRead)
    if fieldWrite =/= fieldRead .

  eq read(writeAccount(person, $account, acc), $account :: listId) = read(acc, listId) .


endfm

fmod ACC-TESTE is
  pr ACC-FUNCTIONAL .
  op aliceAcc : -> Account .
  eq aliceAcc = Account(10, 20) .

  op alice : -> Person .
  eq alice = Person(25, aliceAcc) .

  op bobAcc : -> Account .
  eq bobAcc = Account(100, 20) .

  op bob : -> Person .
  eq bob = Person(30, bobAcc) .

  op accountSymb : -> Account .
endfm

red write(aliceAcc, $balance, 100) .
red write(aliceAcc, $debt, 200) .

red write(alice, $age, 40) .
red writeAccount(alice, $account, bobAcc) .

red write(alice, $account :: $balance :: [], 100) .
red write(alice, $account :: $debt :: [], 30) .

red read(aliceAcc, $balance) .
red read(aliceAcc, $debt) .
red read(alice, $age) .
red readAccount(alice, $account) .

red read(readAccount(alice, $account), $balance) .

red read(alice, $account :: $balance :: []) .
red read(alice, $account :: $debt :: []) .

red readPerson(alice, []) .
red readAccount(bobAcc, []) .

red read(write(Person(25, accountSymb), $account :: $balance :: [], 10), $account :: $balance :: []) .
