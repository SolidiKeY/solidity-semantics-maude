fmod ACC-FUNCTIONAL is
  pr INT .
  sort Account .
  op Account : Int Int -> Account [ctor] .

  sort AccountField .
  op $balance : -> AccountField [ctor] .
  op $debt : -> AccountField [ctor] .

  vars balance debt age i : Int .
  vars acc newAcc : Account .

  sort Person .
  op Person : Int Account -> Person [ctor] .

  vars person : Person .

  sort PersonField .
  op $age : -> PersonField [ctor] .
  op $account : -> PersonField [ctor] .

  sort Field .
  subsort AccountField PersonField < Field .

  vars field fieldWrite fieldRead : Field .

  *** Writing

  op write : Account AccountField Int -> Account .
  eq write(Account(balance, debt), $balance, i) = Account(i, debt) .
  eq write(Account(balance, debt), $debt, i) = Account(balance, i) .

  op write : Person PersonField Int -> Person .
  eq write(Person(age, acc), $age, i) = Person(i, acc) .

  op writeAccount : Person PersonField Account -> Person .
  eq writeAccount(Person(age, acc), $account, newAcc) = Person(age, newAcc).

  **** Writing Lists

  sort ListId .
  op [] : -> ListId [ctor] .
  op _::_ : Field ListId -> ListId [ctor] .

  vars listId listIdWrite listIdRead : ListId .

  op write : Account ListId Int -> Account .
  eq write(acc, field :: [], i) = write(acc, field, i) .

  op write : Person ListId Int -> Person .
  eq write(person, field :: [], i) = write(person, field, i) .

  op write : Person ListId Int -> Person .
  eq write(Person(age, acc), $account :: listId, i) = Person(age, write(acc, listId, i)) .

  *** Reading

  op read : Account AccountField -> Int .
  eq read(Account(balance, debt), $balance) = balance .

  op read : Account AccountField -> Int .
  eq read(Account(balance, debt), $debt) = debt .

  op read : Person PersonField -> Int .
  eq read(Person(age, acc), $age) = age .

  op readAccount : Person PersonField -> Account .
  eq readAccount(Person(age, acc), $account) = acc .

  **** Reading Lists

  op read : Account ListId -> Int .
  eq read(acc, field :: []) = read(acc, field) .

  op read : Person ListId -> Int .
  eq read(person, $age :: []) = read(person, $age) .
  eq read(Person(age, acc), $account :: listId) = read(acc, listId) .

  op readAccount : Account ListId -> Account .
  eq readAccount(acc, []) = acc .

  op readPerson : Person ListId -> Person .
  eq readPerson(person, []) = person .
endfm

fmod Read-After-Write is
  inc ACC-FUNCTIONAL .

  vars balance debt age i : Int .
  vars acc newAcc : Account .
  vars person : Person .
  vars field fieldWrite fieldRead : Field .
  vars listId listIdWrite listIdRead : ListId .

  eq read(write(person, field, i), field) = i .
  eq read(write(acc, field, i), field) = i .

  ceq read(write(person, fieldWrite, i), fieldRead) = read(person, fieldRead)
    if fieldWrite =/= fieldRead .
  ceq read(write(acc, fieldWrite, i), fieldRead) = read(acc, fieldRead)
    if fieldWrite =/= fieldRead .

  *** c1 :: c2 :: [] = c3 :: c4 :: []
*** *  read( read( s, p4), p5)              if p2  = p4 :: p5   and p1 = p4 :: p6 this just happens if p5 != p6
*** p5 can be p6


*** if p2  = p4 :: p5   and p1 = p4 :: p6         p5 and p6 can be equal
  eq read(write(person, $account :: listIdWrite, i), $account :: listIdRead) =
        read(write(readAccount(person, $account), listIdWrite, i), listIdRead) .

  ceq read(write(person, fieldWrite :: listIdWrite, i), fieldRead :: listIdRead) = read(person, fieldRead :: listIdRead)
    if fieldWrite =/= fieldRead .

  eq read(writeAccount(person, $account, acc), $account :: listId) = read(acc, listId) .
endfm


fmod Create-Constructor is
  inc ACC-FUNCTIONAL .

  vars balance debt age i : Int .
  vars acc newAcc : Account .
  vars person : Person .
  vars field fieldWrite fieldRead : Field .
  vars listId listIdWrite listIdRead : ListId .

  op defaultPerson : -> Person .
  op defaultAccount : -> Account .

  op ageSkolem : -> Int .
  op accSkolem : -> Account .
  op balanceSkolem : -> Int .
  op debtSkolem : -> Int .

  eq write(defaultPerson, field, i) = write(Person(0, defaultAccount), field, i) .
  eq write(defaultAccount, field, i) = write(Account(0, 0), field, i) .

  eq write(defaultPerson, listId, i) = write(Person(0, defaultAccount), listId, i) .
  eq write(defaultAccount, listId, i) = write(Account(0, 0), listId, i) .

  eq write(person, field, i) = write(Person(ageSkolem, accSkolem), field, i) .
  eq write(person, listId, i) = write(Person(ageSkolem, accSkolem), listId, i) .

  eq write(acc, field, i) = write(Account(balanceSkolem, debtSkolem), field, i) .
  eq write(acc, listId, i) = write(Account(balanceSkolem, debtSkolem), listId, i) .
endfm

*** write([ (0, 1) , (1 , 2) ], (0, 2)) = [ (0, 2), (0, 1) , (1 , 2) ]
