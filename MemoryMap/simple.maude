fmod MAP is
    sort Variable Index Key Value Memory .

    op write : Memory Variable Index Value -> Memory .
    op read : Memory Variable Index -> Value .
    op assign : Memory Variable Variable -> Memory .
    op isAssignedSame : Memory Variable Variable -> Bool .
    op new : Memory Variable -> Memory .
    op defaultValue : -> Value .
    op emptyMemory : -> Memory .

    var memory : Memory .
    vars u v : Variable .
    vars i j : Index .
    var val : Value .

    eq isAssignedSame(memory, v, v) = true .
    eq isAssignedSame(assign(memory, u, v), u, v) = true .
    eq isAssignedSame(assign(memory, u, v), v, u) = true .
    ceq isAssignedSame(new(memory, v), u, v) = false
        if u =/= v .
    ceq isAssignedSame(new(memory, v), v, u) = false
        if u =/= v .
    ceq isAssignedSame(emptyMemory, u, v) = false
        if u =/= v .
    eq isAssignedSame(write(memory, v, i, val), u, v) = isAssignedSame(memory, u, v) .

    ceq read(write(memory, u, i, val), v, i) = val
        if isAssignedSame(memory, u, v) .

    ceq read(write(memory, u, i, val), v, j) = read(memory, v, j)
        if not(isAssignedSame(memory, u, v)) or i =/= j .

    eq read(new(memory, u), u, i) = defaultValue .
endfm

fmod TEST-MAP is
    pr MAP .

    ops i j : -> Index .
    ops u v : -> Variable .
    ops v1 v2 : -> Value .
    op unknownMemory : -> Memory .

    op exMemory : -> Memory .
endfm

red read(write(unknownMemory, v, i, v1), v, i) .

red read(write(unknownMemory, v, i, v1), v, j) .

red read(write(unknownMemory, v, i, v1), u, j) .

red read(write(unknownMemory, v, i, v1), u, i) .
