load ../Maps/Polymorphic .

fmod IDENTITIES{Key :: TRIV, Value :: TRIV, Variable :: TRIV} is
    pr NAT .

    sorts Memory .

    pr DEFAULT-MAP{Key, Value} .
    pr DEFAULT-MAP{Variable, Nat} .
    pr DEFAULT-MAP{Nat, Map{Key, Value}} .

    op Memory : Nat Map{Variable, Nat} Map{Nat, Map{Key, Value}} -> Memory .

    op length : Memory -> Nat .
    op mapVarId : Memory -> Map{Variable, Nat} .
    op mapIdKey : Memory -> Map{Nat, Map{Key, Value}} .


    var size : Nat .
    var mapToId : Map{Variable, Nat} .
    var mapToKey : Map{Nat, Map{Key, Value}} .

    eq length(Memory(size, mapToId, mapToKey)) = size .
    eq mapVarId(Memory(size, mapToId, mapToKey)) = mapToId .
    eq mapIdKey(Memory(size, mapToId, mapToKey)) = mapToKey .


    op write : Memory Variable$Elt Key$Elt Value$Elt -> Memory .
    op assign : Memory Variable$Elt Variable$Elt -> Memory .
    op read : Memory Variable$Elt Key$Elt -> Value$Elt .

    var memory : Memory .
    vars u v : Variable$Elt .
    vars i1 i2 vLocation : Nat .
    vars i j : Key$Elt .
    vars val v1 v2 : Value$Elt .
    var idToMap : Map{Nat, Map{Key, Value}} .

    op replace : Nat Map{Nat, Map{Key, Value}} Variable$Elt Key$Elt Value$Elt -> Map{Nat, Map{Key, Value}} .

    eq replace(vLocation, idToMap, v, i, val) = write(idToMap, vLocation, write(read(idToMap, vLocation) , i, val)) .

    eq write(memory, v, i, val) = Memory(length(memory), mapVarId(memory),
          replace(read(mapVarId(memory), v), mapIdKey(memory), v, i, val)) .

    eq read(memory, v, i) = read(read(mapIdKey(memory), read(mapVarId(memory), v)), i) .

    eq assign(memory, u, v) = Memory(length(memory)
          , write(mapVarId(memory), u, read(mapVarId(memory), v))
          , mapIdKey(memory)) .

    op new : Memory Variable$Elt -> Memory .

    eq new(memory, v) = Memory(s length(memory), write(mapVarId(memory), v, length(memory)) ,mapIdKey(memory)) .

    op emptyMemory : -> Memory .
    eq emptyMemory = Memory(0, emptyMap, emptyMap) .

    op defaultValue : -> Value$Elt .

    eq read((defaultValue).Map{Key,Value}, i) = defaultValue .
endfm

fmod TEST-IDENTITIES{Key :: TRIV, Value :: TRIV, Variable :: TRIV} is
    pr IDENTITIES{Key, Value, Variable} .

    op memory : -> Memory .
    ops u v : -> Variable$Elt .
    ops i j : -> Key$Elt .
    ops val v1 v2 : -> Value$Elt .

    var memoryVar : Memory .

    op memoryWrites : Memory -> Memory .
    eq memoryWrites(memoryVar) = write(write(memoryVar, v, i, v1), u, j, v2) .

    op memoryEx : -> Memory .
    eq memoryEx = memoryWrites(memory) .

    op memoryEx2 : -> Memory .
    eq memoryEx2 = memoryWrites(assign(memory, u, v)) .

    op memoryEx3 : -> Memory .
    eq memoryEx3 = memoryWrites(new(new(emptyMemory, u), v)) .
endfm

red read(memoryEx, u, j) .

red read(memoryEx, v, i) .

red read(memoryEx, u, i) .

red read(memoryEx, v, j) .

red read(memoryEx2, u, j) .

red read(memoryEx2, v, i) .

red read(memoryEx2, u, i) .

red read(memoryEx2, v, j) .

red read(memoryEx3, u, j) .

red read(memoryEx3, v, i) .

red read(memoryEx3, u, i) .

red read(memoryEx3, v, j) .
