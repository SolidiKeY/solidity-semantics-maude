fmod MAP{Key :: TRIV, Value :: TRIV} is
    sort Map{Key, Value} .

    var map : Map{Key, Value} .
    vars key keyWrite keyRead : Key$Elt .
    var val : Value$Elt .

    op write : Map{Key, Value} Key$Elt Value$Elt -> Map{Key, Value} .
    op read : Map{Key, Value} Key$Elt -> Value$Elt .

    eq read(write(map, key, val), key) = val .
    ceq read(write(map, keyWrite, val), keyRead) = read(map, keyRead)
        if keyWrite =/= keyRead .
endfm

fmod DEFAULT-MAP{Key :: TRIV, Value :: TRIV} is
    inc MAP{Key, Value} .

    op emptyMap : -> Map{Key, Value} .
    op defaultValue : -> Value$Elt .

    var key : Key$Elt .

    eq read(emptyMap, key) = defaultValue .
endfm

fmod TEST-MAP is
    pr DEFAULT-MAP{Int, Int} * (sort Map{Int, Int} to Map) .

    op ex : -> Map .

    eq ex = write(write(emptyMap, 0, 1), 2, 3) .
endfm

red read(write(emptyMap, 0, 1), 0) .
red read(ex, 0) .
red read(ex, 1) .
red read(ex, 2) .
