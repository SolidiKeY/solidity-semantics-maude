fmod MAPS{X :: TRIV, Y :: DEFAULT} is
  sorts Map{X, Y} .

  op [] : -> Map{X, Y} [ctor] .
  op write : Map{X, Y} X$Elt Y$Elt -> Map{X, Y} [ctor] .

  vars k1 k2 : X$Elt .
  vars MAPS : Map{X, Y} .
  vars v1 v2 : Y$Elt .

  op read : Map{X, Y} X$Elt -> Y$Elt .

  eq read(write(MAPS, k1, v1),k2) = if k1 == k2 then v1 else read(MAPS, k2) fi .

  eq read([], k1) = 0 .

endfm

fmod MAPS-TEST is
  protecting MAPS{Nat, Nat0} .
endfm


red write([], 0, (1 + 1)) .

red write(write([], 0, 1), 0, 2) .

red write(write([], 0, 1), 3, 2) .

red read(write([],0,1),0) .

red read(write([],0,1),2) .
