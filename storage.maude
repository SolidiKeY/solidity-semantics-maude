fmod STORAGE{X :: TRIV, Y :: TRIV} is
  protecting NAT .

  sorts Storage{X, Y} .

  op [] : -> Storage{X, Y} [ctor] .
  op write : Storage{X, Y} X$Elt Y$Elt -> Storage{X, Y} [ctor] .

  vars k1 k2 : X$Elt .
  vars STORAGE : Storage{X, Y} .
  vars v1 v2 : Y$Elt .

  eq write(write(STORAGE, k1, v1), k1, v2) = write(STORAGE, k1, v2) .
  ceq write (write(STORAGE, k1, v1), k2, v2) = write(write(STORAGE, k2, v2), k1, v1)
    if (k1 =/= k2) [nonexec] .

  op read : Storage{X, Y} X$Elt -> Y$Elt .

  eq read(write(STORAGE, k1, v1),k2) = if (k1 == k2) then v1 else read(STORAGE, k2) fi .


endfm

fmod STORAGE-TEST is
  protecting STORAGE{Nat, Nat} .
endfm

red write([], 0, (1 + 1)) .

red write(write([], 0, 1), 0, 2) .

red write(write([], 0, 1), 3, 2) .

red read(write([],0,1),0) .
