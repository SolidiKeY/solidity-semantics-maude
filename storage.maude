fmod MAP{X :: TRIV, Y :: DEFAULT} is
  sorts Map{X, Y} .

  op emptyMap : -> Map{X, Y} [ctor] .
  op write : Map{X, Y} X$Elt Y$Elt -> Map{X, Y} [ctor] .

  vars k1 k2 : X$Elt .
  vars MAP : Map{X, Y} .
  vars v1 v2 : Y$Elt .

  op read : Map{X, Y} X$Elt -> Y$Elt .

  eq read(write(MAP, k1, v1),k2) = if k1 == k2 then v1 else read(MAP, k2) fi .

  eq read(emptyMap, k1) = 0 .

endfm

fmod MAP-TEST is
  protecting MAP{Nat, Nat0} .
endfm


red write(emptyMap, 0, (1 + 1)) .

red write(write(emptyMap, 0, 1), 0, 2) .

red write(write(emptyMap, 0, 1), 3, 2) .

red read(write(emptyMap,0,1),0) .

red read(write(emptyMap,0,1),2) .
