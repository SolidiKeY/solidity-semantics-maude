fmod ACCOUNT is
    pr NAT .
    sorts PrimIdentity Identity Memory Selector .

    op emptyMemory : -> Memory .
    ops new : Memory Identity -> Memory .
    ops $account $balance : -> Selector .
    op idLift : PrimIdentity -> Identity .
    ops fieldApp _:_ : Identity Selector -> Identity .
    op read : Memory Identity -> Nat .
endfm

fmod ACC-EX is
    pr ACCOUNT .

    op alice : -> PrimIdentity .
    ops cAlice aliceBal : -> Identity .
    op newAliceMem : -> Memory .
    op readMem : -> Nat .

    eq cAlice = idLift(alice) .
    eq aliceBal = fieldApp(fieldApp(cAlice, $account), $balance) .
    eq newAliceMem = new(emptyMemory, cAlice) .
    eq readMem = read(newAliceMem, aliceBal) .
endfm

fmod CANONICAL-SOL is
    pr ACC-EX .

    var mem : Memory .
    var id idM : Identity .
    var cId : PrimIdentity .
    var sel : Selector .

    eq fieldApp(id, sel) = id : sel .

    op first : Identity -> PrimIdentity .

    eq first(idLift(cId)) = cId .
    eq first(id : sel) = first(id) .

    ceq read(new(mem, idM), id) = 0
        if first(idM) = first(id) .
endfm

red in CANONICAL-SOL : readMem .


fmod APPEND-RIGHT is
    pr ACC-EX .

    sort ListSel .

    var mem : Memory .
    var pId : PrimIdentity .
    var id idM : Identity .
    var cId : PrimIdentity .
    var sel selId : Selector .
    var lSel : ListSel .

    op liftSel : Selector -> ListSel .
    op cons : Selector ListSel -> ListSel .
    op idCons : PrimIdentity ListSel -> Identity .

    op appendRight : Selector ListSel -> ListSel .

    eq fieldApp(idLift(cId), sel) = idCons(cId, liftSel(sel)) .
    eq fieldApp(idCons(cId, lSel), sel) = idCons(cId, appendRight(sel, lSel)) .

    eq appendRight(sel, liftSel(selId)) = cons(selId, liftSel(sel)) .
    eq appendRight(sel, cons(selId, lSel)) = cons(selId, appendRight(sel, lSel)) .

    eq read(new(mem, idLift(cId)), idCons(cId, lSel)) = 0 .
endfm

red in APPEND-RIGHT : readMem .
