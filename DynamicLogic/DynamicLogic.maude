fmod DYNAMIC is
    sorts Key Value KeyValuePair State Assign Program .

    op _:=_ : Key Value -> KeyValuePair [prec 31] .

    subsort KeyValuePair < State .

    op _||_ : State State -> State [prec 33 assoc] .

    subsort Assign < Program .

    op _;_ : Program Program -> Program [prec 37 assoc] .

    op _<-_ : Key Value -> Assign [prec 35] .
    op _<-_ : Key Key -> Assign [prec 35] .

    op {_}<_> : State Program -> State .

    vars key keyState keyWrite : Key .
    var value newValue : Value .
    var state : State .
    var program : Program .

    op findValue : State Key -> Value .
    eq findValue(key := value, key) = value .
    eq findValue(key := value || state, key) = value .
    ceq findValue(keyState := value || state, key) = findValue(state, key)
        if keyState =/= key .

    op substituteValue : State Key Value -> State .
    eq substituteValue(key := value, key, newValue) = key := newValue .
    eq substituteValue(key := value || state, key, newValue) = key := newValue || state .
    ceq substituteValue(keyState := value || state, key, newValue) = keyState := value || substituteValue(state, key, newValue)
        if keyState =/= key .

    eq { state }< key <- value > = substituteValue(state, key, value) .
    eq { state }< key <- value ; program > = { substituteValue(state, key, value) } < program > .
    eq { state }< key <- keyWrite > = substituteValue(state, key, findValue(state, keyWrite)) .
    eq { state }< key <- keyWrite ; program > = { substituteValue(state, key, findValue(state, keyWrite)) }< program > .

endfm

fmod DYNAMIC-TEST is
    pr DYNAMIC .
    ops x y z  : -> Key .
    ops x0 y0 z0 : -> Value .
endfm

red { x := x0 || (y := y0 || z := z0) }< z <- x > .

red { x := x0 || y := y0 || z := z0 }< z <- x ; x <- y ; y <- z > .
