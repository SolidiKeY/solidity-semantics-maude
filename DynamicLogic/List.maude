fmod DYNAMIC{KeyValuePair :: TRIV, Statement :: TRIV} is
    pr LIST{KeyValuePair} *
        ( sort List{KeyValuePair} to State
        , sort NeList{KeyValuePair} to NeState
        , op __ to  _||_) .
    pr LIST{Statement} *
        ( sort List{Statement} to Program
        , op __ to _;_) .

    sorts Key Value Assign .
    subsort Assign < Statement$Elt .

    op _:=_ : Key Value -> KeyValuePair$Elt [prec 31] .

    op _<-_ : Key Value -> Assign [prec 35] .
    op _<-_ : Key Key -> Assign [prec 35] .

    op {_}<_> : State Program -> State .

    vars key keyState keyWrite : Key .
    var value newValue : Value .
    var state : State .
    var program : Program .

    op findValue : NeState Key -> Value .
    eq findValue(key := value || state, key) = value .
    ceq findValue(keyState := value || state, key) = findValue(state, key)
        if keyState =/= key .

    op substituteValue : NeState Key Value -> State .
    eq substituteValue(key := value || state, key, newValue) = key := newValue || state .
    ceq substituteValue(keyState := value || state, key, newValue) = keyState := value || substituteValue(state, key, newValue)
        if keyState =/= key .

    eq { state }< key <- value ; program > = { substituteValue(state, key, value) } < program > .
    eq { state }< key <- keyWrite ; program > = { substituteValue(state, key, findValue(state, keyWrite)) }< program > .
    eq { state }< nil > = state .

endfm

fmod DYNAMIC-TEST{KeyValuePair :: TRIV, Statement :: TRIV} is
    pr DYNAMIC{KeyValuePair, Statement} .
    ops x y z  : -> Key .
    ops x0 y0 z0 : -> Value .
endfm

red { x := x0 || (y := y0 || z := z0) }< z <- x > .

red { x := x0 || y := y0 || z := z0 }< z <- x ; x <- y ; y <- z > .
