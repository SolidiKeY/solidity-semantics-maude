fmod ACCOUNT{Selector :: TRIV} is
    pr NAT .
    pr INT .
    pr LIST{Selector} .

    sorts IdSelector PersonSelector PrePersonSelector AccSelector Selector PrimarySelector .
    subsort Nat < IdSelector .
    subsort PrimarySelector < IdSelector PersonSelector AccSelector < Selector$Elt .

    op $accounts : -> IdSelector .
    op $name : -> PersonSelector .
    ops $balance $open : -> AccSelector .

    sort Heap Name Boolean Value .
    ops tt ff : -> Boolean [ctor] .

    subsort Boolean Name Int < Value .

    op write : Heap Value Selector$Elt Value -> Heap .
    op read : Heap Value NeList{Selector} -> Value .
    op new : Heap Value Nat -> Heap .

    var heap : Heap .
    var n : Nat .
    vars id idW idR : Value .
    vars selector selectorW selectorR : Selector$Elt .
    var idSel : IdSelector .
    var val : Value .
    var neList : NeList{Selector} .
    var primSelector : PrimarySelector .

    mb $name    : PrimarySelector .
    mb $balance : PrimarySelector .
    mb $open    : PrimarySelector .

    op isNewId : Heap Value Value -> Bool .

    eq isNewId(heap, id, id) = true .
    ceq isNewId(heap, id, read(heap, idR, selector)) = true
        if isNewId(heap, id, idR) .

    ceq read(new(heap, id, n), idR, primSelector) = defaultSelect(primSelector)
        if isNewId(new(heap, id, n), id, idR) .

    eq read(write(heap, id, selector, val), id, selector) = val .
    ceq read(write(heap, idW, selectorW, val), idR, selectorR) = read(heap, idR, selectorR)
        if selectorW =/= selectorR or idW =/= idR .

    ceq read(heap, id, idSel neList) = read(heap, read(heap, id, idSel), neList)
        if read(heap, id, idSel) :: Value .
    eq read(write(heap, id, selector, idW), id, selector neList) = read(heap, idW, neList) .

    op assignAcc : Heap Value Value -> Heap .
    eq assignAcc(heap, idW, idR) = write(heap, idW, $accounts, read(heap, idR, $accounts)) .

    op defaultName : -> Name .

    op defaultSelect : PrimarySelector -> Value .
    eq defaultSelect($name) = defaultName .
    eq defaultSelect($balance) = 0 .
    eq defaultSelect($open) = ff .

    op emptyHeap : -> Heap .

    eq read(emptyHeap, id, primSelector) = defaultSelect(primSelector) .


    sort WriteArgs .
    op _[_]<-_ : Value Selector$Elt Value -> WriteArgs [prec 30] .
    op _;_ : Heap WriteArgs -> Heap .

    eq heap ; id [ selector ]<- val = write(heap, id, selector, val) .
endfm

fmod ACCOUNT-EX{Selector :: TRIV} is
    pr ACCOUNT{Selector} .

    ops heap heapWritten heapNew heapNew2 heapNew3 heapBob heapCarol heapWritten2 : -> Heap .
    ops Alice NName : -> Name .
    ops idAlice rId idAccAlice idBob newId rIdS idAccAliceS : -> Value .

    eq heapWritten = heap ; idAccAlice [ $balance ]<- 100 ; idAccAlice [ $open ]<- tt ;
          idAlice [ $accounts ]<- rId ; rId [ 10 ]<- idAccAlice ; idAlice [ $name ]<- Alice  .

    eq heapNew = new(heapWritten, newId, 10) .

    eq heapBob = assignAcc(heapWritten, idBob, idAlice) .
    eq heapCarol = heapWritten ; read(heap, idBob, $accounts) [ 11 ] <- idAccAlice .
    *** carol.accounts[10] = alice.accounts[10]

    eq heapNew2 = heapNew ; newId [ $name ]<- NName .

    eq rIdS = read(heap, idAlice, $accounts) .
    eq idAccAliceS = read(heap, rIdS, 10) .

    eq heapWritten2 = heap ; idAccAliceS [ $balance ]<- 100 ; idAccAliceS [ $open ]<- tt ; idAlice [ $name ]<- Alice  .

    eq heapNew3 = new(heap, newId, 10) .
endfm

red read(heapWritten, idAlice, $name) .
red read(heapWritten, idAccAlice, $balance) .
red read(heapWritten, idAccAlice, $open) .
red read(heapWritten, idAlice, $accounts) .
red read(heapWritten, rId, 10) .

red read(heapWritten, idAlice, $accounts) .
red read(heapWritten, idAlice, $accounts 10) .
red read(heapWritten, idAlice, $accounts 10 $balance) .
red read(heapWritten, idAlice, $accounts 10 $open) .
*** alice.accounts[10].open

red read(heapNew, newId, $accounts 10 $open) .
red read(heapNew, newId, $accounts 10 $balance) .
red read(heapNew, newId, $name) .
red read(heapNew, read(heapNew, newId, $accounts 10), $balance) .

red read(heapBob, idBob, $accounts 10) .
red read(heapBob, idBob, $accounts 10 $balance) .

red read(heapCarol, idBob, $accounts 11) .
red read(heapCarol, idBob, $accounts 11 $balance) .

red read(heapNew2, newId, $name) .

red read(heapWritten2, idAlice, $name) .
red read(heapWritten2, idAlice, $accounts 10 $balance) .

red read(heapNew3, newId, $accounts 10 $balance) .

red read(emptyHeap, newId, $balance) .
red read(emptyHeap, newId, $name) .
red read(emptyHeap, newId, $open) .
